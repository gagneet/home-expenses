// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Auth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  country       String    @default("AU") // AU, US, IN
  timezone      String    @default("Australia/Sydney")
  currency      String    @default("AUD")
  accounts      Account[]
  sessions      Session[]

  // Financial data relationships
  bankAccounts   BankAccount[]
  transactions   Transaction[]
  budgets        Budget[]
  investments    Investment[]
  superannuation Superannuation[]
  taxRecords     TaxRecord[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Financial Models
model BankAccount {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  name          String
  accountNumber String
  bsb           String? // Australia
  routingNumber String? // USA
  ifscCode      String? // India
  accountType   AccountType
  institution   String
  balance       Decimal     @db.Decimal(15, 2)
  currency      String      @default("AUD")
  isActive      Boolean     @default(true)

  transactions           Transaction[]
  statements             Statement[]
  transfersToThisAccount Transaction[] @relation("TransferAccount")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("bank_accounts")
}

model Transaction {
  id        String      @id @default(cuid())
  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountId String
  account   BankAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)

  date                DateTime
  amount              Decimal  @db.Decimal(15, 2)
  description         String
  originalDescription String // Unmodified from statement

  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id])
  subcategory String?

  merchant String?
  location String?

  isTransfer        Boolean      @default(false)
  transferAccountId String?
  transferAccount   BankAccount? @relation("TransferAccount", fields: [transferAccountId], references: [id])

  isIncome      Boolean @default(false)
  taxDeductible Boolean @default(false)

  statementId String?
  statement   Statement? @relation(fields: [statementId], references: [id])

  // Country-specific fields
  gstAmount Decimal? @db.Decimal(15, 2) // Australia
  salesTax  Decimal? @db.Decimal(15, 2) // USA

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, date])
  @@index([accountId, date])
  @@map("transactions")
}

model Category {
  id       String     @id @default(cuid())
  name     String
  parentId String?
  parent   Category?  @relation("CategoryParent", fields: [parentId], references: [id])
  children Category[] @relation("CategoryParent")

  color         String? // Hex color
  icon          String? // Icon identifier
  isIncome      Boolean @default(false)
  taxDeductible Boolean @default(false)

  country String @default("ALL") // ALL, AU, US, IN

  transactions Transaction[]
  budgetItems  BudgetItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

model Statement {
  id        String      @id @default(cuid())
  accountId String
  account   BankAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)

  fileName String
  filePath String
  fileHash String @unique // Prevent duplicates

  periodStart    DateTime
  periodEnd      DateTime
  openingBalance Decimal  @db.Decimal(15, 2)
  closingBalance Decimal  @db.Decimal(15, 2)

  bankType         String // CBA, AMEX, ING, UBANK
  processingStatus ProcessingStatus @default(PENDING)
  errorMessage     String?

  transactions Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("statements")
}

model Budget {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  name      String
  period    BudgetPeriod
  startDate DateTime
  endDate   DateTime

  totalBudget Decimal @db.Decimal(15, 2)
  totalSpent  Decimal @default(0.0) @db.Decimal(15, 2)

  items BudgetItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("budgets")
}

model BudgetItem {
  id       String @id @default(cuid())
  budgetId String
  budget   Budget @relation(fields: [budgetId], references: [id], onDelete: Cascade)

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  amount Decimal @db.Decimal(15, 2)
  spent  Decimal @default(0.0) @db.Decimal(15, 2)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("budget_items")
}

// Investment tracking
model Investment {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  symbol   String // ASX:BHP, NASDAQ:AAPL, NSE:RELIANCE
  name     String
  exchange String
  country  String

  quantity     Decimal @db.Decimal(15, 4)
  averageCost  Decimal @db.Decimal(10, 4)
  currentPrice Decimal @db.Decimal(10, 4)
  marketValue  Decimal @db.Decimal(15, 2)

  unrealizedGainLoss Decimal  @db.Decimal(15, 2)
  dividendYield      Decimal? @db.Decimal(5, 2)

  lastUpdated DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("investments")
}

// Australian Superannuation
model Superannuation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  fundName     String
  memberNumber String
  abn          String?
  usi          String? // Unique Superannuation Identifier

  balance                 Decimal @db.Decimal(15, 2)
  employerContributions   Decimal @db.Decimal(15, 2)
  personalContributions   Decimal @db.Decimal(15, 2)
  governmentContributions Decimal @db.Decimal(15, 2)

  insurancePremiums Decimal? @db.Decimal(15, 2)
  fees              Decimal? @db.Decimal(15, 2)

  financialYear Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("superannuation")
}

// Tax record keeping
model TaxRecord {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  financialYear Int
  country       String

  grossIncome Decimal  @db.Decimal(15, 2)
  taxPaid     Decimal  @db.Decimal(15, 2)
  taxRefund   Decimal? @db.Decimal(15, 2)

  deductions Json // Store deduction categories and amounts

  filedDate DateTime?
  lodgedBy  String? // Self, Accountant, etc.

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, financialYear, country])
  @@map("tax_records")
}

// Enums
enum AccountType {
  CHECKING
  SAVINGS
  CREDIT
  INVESTMENT
  SUPERANNUATION
  OFFSET
  BUSINESS
}

enum BudgetPeriod {
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

enum ProcessingStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}
